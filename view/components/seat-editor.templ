package components

import "fmt"
import "strings"
import "example.com/test/db"

func isAvailable(i int, j int) bool {
	if i == j+1 {
		return false
	}
	return true
}

func getBg(disabled bool) string {
	var bg string
	if disabled {
		bg = "bg-slate-900"
	} else {
		bg = "bg-slate-600"
	}
	return bg
}

func getDate(timeStr string, i int) string {
	return strings.Split(timeStr, "-")[i]
}

templ DateSelection(date string, movieId int) {
	<label class="bg-slate-600 text-lg w-fit p-3 rounded-md cursor-pointer has-[:checked]:bg-cyan-200 has-[:checked]:text-black">
		<div class="">{ getDate(date, 1) }</div>
		<div class="">{ getDate(date, 2) }</div>
		<input type="radio" name="date" hx-trigger="change" hx-get={ fmt.Sprintf("/movie/schedule/%d/%s", movieId, date) } hx-target="#time-selection" hx-swap="innerHTML" data-date={ date }/>
	</label>
}

templ TimeRadio(time string, id string) {
	<label class="has-[:checked]:bg-cyan-300 has-[:checked]:text-black btn">
		{ time }
		<input type="radio" class="radio-lg" name="time" data-time={ id }/>
	</label>
}

templ TimeSelection(times []string) {
	for _, time := range times {
		@TimeRadio(time, time)
	}
}

script CalcPrice() {
	let seats = document.querySelectorAll("input[name=tickets]:checked");
	let ticketsCount = document.getElementById("tickets-count");
	let ticketsMoney = document.getElementById("tickets-money");
	let count = seats.length;
	let money = count * 5;
	ticketsCount.innerText = count;
	ticketsMoney.innerText = "$" + money;
}

templ SeatSelection(seatId string, disabled bool) {
	<label for={ seatId } class={ fmt.Sprintf("cursor-pointer w-full h-full %s has-[:checked]:bg-green-400", getBg(disabled)) }>
		<div class="inline-block text-center w-full min-h-5"></div>
		<input type="checkbox" name="tickets" id={ seatId } disabled?={ disabled } onchange={ CalcPrice() }/>
	</label>
}

script Book(movieID int) {
	let seats = document.querySelectorAll("input[name=tickets]:checked");
	if(seats.length == 0) {
		alert("Please select at least one seat");
		return;
	}
	let date = document.querySelector("input[name=date]:checked");
	if(date == null) {
		alert("Please select a date");
		return;
	}

	let time = document.querySelector("input[name=time]:checked");
	if(time == null) {
		alert("Please select a time");
		return;
	}

	fetch("/movie/book", {
		method: "POST",
		contentType: "application/json",
		body: JSON.stringify({
			"seats": Array.from(seats).map(seat => seat.id),
			"date": date.dataset.date,
			"time": time.dataset.time,
			"movie_id": movieID
		})
	})
}

templ SeatEditor(dates []string, movie db.Movie) {
	<div class="bg-black w-full min-h-full flex justify-evenly" id="seat-editor">
		<div class="h-fit w-8/12">
			<div class="font-bold text-xl flex justify-between">
				{ movie.Title.String }
			</div>
			<div class="">
				<div class="flex justify-end">
					<div class="item">Available</div>
					<div class="item before:bg-slate-600">Booked</div>
					<div class="item before:bg-green-300">Selected</div>
				</div>
				<div class="bg-slate-600 mt-5 text-center text-white">Screen</div>
				<div class="w-full h-full mt-5 grid gap-3 px-4" style="grid-template-columns: repeat(15, minmax(0, 1fr)); grid-template-rows: repeat(15, minmax(0,1fr))">
					for i := 0; i < 15 * 15; i++ {
						@SeatSelection(fmt.Sprintf("%d", i), false)
					}
				</div>
				<div class="">
					<div class="flex justify-evenly mt-5 mb-5">
						for _, v := range dates {
							@DateSelection(v, int(movie.MovieID))
						}
					</div>
					<div id="time-selection" class="flex justify-evenly max-h-20 min-h-20"></div>
				</div>
			</div>
		</div>
		<div class="flex justify-between w-4/12 px-10">
			<div class="">
				<span><span class="" id="tickets-count">0</span> Tickets </span>
				<div class="" id="tickets-money">0</div>
			</div>
			<div class="btn" onclick={ Book(int(movie.MovieID)) }>Book</div>
		</div>
	</div>
}
