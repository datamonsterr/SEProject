// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: booking.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bookTicket = `-- name: BookTicket :one
INSERT INTO ticket (user_id, movie_id, cinema_id, schedule_id, seat_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING ticket.id
`

type BookTicketParams struct {
	UserID     pgtype.Int4
	MovieID    pgtype.Int4
	CinemaID   pgtype.Int4
	ScheduleID pgtype.Int4
	SeatID     pgtype.Int4
}

func (q *Queries) BookTicket(ctx context.Context, arg BookTicketParams) (int32, error) {
	row := q.db.QueryRow(ctx, bookTicket,
		arg.UserID,
		arg.MovieID,
		arg.CinemaID,
		arg.ScheduleID,
		arg.SeatID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getScheduleCinema = `-- name: GetScheduleCinema :one
SELECT DISTINCT cinema_id FROM schedule
WHERE movie_id = $1 AND schedule_movie_date = $2
`

type GetScheduleCinemaParams struct {
	MovieID           pgtype.Int4
	ScheduleMovieDate pgtype.Date
}

func (q *Queries) GetScheduleCinema(ctx context.Context, arg GetScheduleCinemaParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getScheduleCinema, arg.MovieID, arg.ScheduleMovieDate)
	var cinema_id pgtype.Int4
	err := row.Scan(&cinema_id)
	return cinema_id, err
}

const getScheduleDate = `-- name: GetScheduleDate :many
SELECT DISTINCT schedule_movie_date FROM schedule
WHERE movie_id = $1
`

func (q *Queries) GetScheduleDate(ctx context.Context, movieID pgtype.Int4) ([]pgtype.Date, error) {
	rows, err := q.db.Query(ctx, getScheduleDate, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Date
	for rows.Next() {
		var schedule_movie_date pgtype.Date
		if err := rows.Scan(&schedule_movie_date); err != nil {
			return nil, err
		}
		items = append(items, schedule_movie_date)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleTime = `-- name: GetScheduleTime :many
SELECT schedule_id ,schedule_movie_start, room_id FROM schedule
WHERE movie_id = $1 AND schedule_movie_date = $2
`

type GetScheduleTimeParams struct {
	MovieID           pgtype.Int4
	ScheduleMovieDate pgtype.Date
}

type GetScheduleTimeRow struct {
	ScheduleID         int32
	ScheduleMovieStart pgtype.Time
	RoomID             pgtype.Int4
}

func (q *Queries) GetScheduleTime(ctx context.Context, arg GetScheduleTimeParams) ([]GetScheduleTimeRow, error) {
	rows, err := q.db.Query(ctx, getScheduleTime, arg.MovieID, arg.ScheduleMovieDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScheduleTimeRow
	for rows.Next() {
		var i GetScheduleTimeRow
		if err := rows.Scan(&i.ScheduleID, &i.ScheduleMovieStart, &i.RoomID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeat = `-- name: GetSeat :many
SELECT seat_id, room_id FROM seat
WHERE room_id = $1
`

func (q *Queries) GetSeat(ctx context.Context, roomID pgtype.Int4) ([]Seat, error) {
	rows, err := q.db.Query(ctx, getSeat, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seat
	for rows.Next() {
		var i Seat
		if err := rows.Scan(&i.SeatID, &i.RoomID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSelectedSeat = `-- name: GetSelectedSeat :many
SELECT seat_id FROM ticket
WHERE schedule_id = $1
`

func (q *Queries) GetSelectedSeat(ctx context.Context, scheduleID pgtype.Int4) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, getSelectedSeat, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Int4
	for rows.Next() {
		var seat_id pgtype.Int4
		if err := rows.Scan(&seat_id); err != nil {
			return nil, err
		}
		items = append(items, seat_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
