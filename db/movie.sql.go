// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movie.sql

package db

import (
	"context"
)

const getMovie = `-- name: GetMovie :one
SELECT movie_id, title, overview, original_language, ageres, release_date, status, tagline, length, url FROM movie 
WHERE movie_id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, movieID int32) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, movieID)
	var i Movie
	err := row.Scan(
		&i.MovieID,
		&i.Title,
		&i.Overview,
		&i.OriginalLanguage,
		&i.Ageres,
		&i.ReleaseDate,
		&i.Status,
		&i.Tagline,
		&i.Length,
		&i.Url,
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT movie_id, title, overview, original_language, ageres, release_date, status, tagline, length, url FROM movie LIMIT 20
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.MovieID,
			&i.Title,
			&i.Overview,
			&i.OriginalLanguage,
			&i.Ageres,
			&i.ReleaseDate,
			&i.Status,
			&i.Tagline,
			&i.Length,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
